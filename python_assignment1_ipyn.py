# -*- coding: utf-8 -*-
"""Python_Assignment1.ipyn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14-5qnMFVubDdFke-YA8dVepCA2KC7TwP
"""

from re import I
# 1 Explain the key featu$es of Python that make it a popular choice for programming
# Python is a popular choice for programming due to several key features:
#It is Widely used in the industry
#It has many Libraries (<1.3 lakh) and a very active community
#It can be used in automation
#It can be used in image processing
#It is very simple to use

#2.  Describe the role of predefined keywords in Python and provide examples of how they are used in a programme#
#  In python pre defined keywords are those keywords which are reserved identifiers that have special meanings and they cannot be used as identifiers ex int, float, if, if-else,  def,lambda etc
#ex
age = 20
if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")

#3.compare and contrast mutable and immutable obbjcts in Python with example
#Mutable objects can be modified after their creation. This means you can change their content without creating a new object.ex- list ,dictionay, set
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)
#Immutable Object- Immutable objects cannot be modified after they are created. Any change results in the creation of a new object.ex- string ,tuple
my_tuple = (1, 2, 3)
new_tuple = my_tuple + (4,)
print(new_tuple)
print(my_tuple)

#4.Discuss the different types of operators in Python and provide examples of how they are use

#The different types of operators in oython are
#1. Arithmetic Operators
a = 10
b = 3
print(a + b)  # Addition
print(a - b)  # Subtraction
print(a * b)  # Multiplication
print(a / b)  # Division
print(a // b) # Floor Division
print(a % b)  # Modulus
print(a ** b) # Exponentiation
#2. Comparison Operators
x = 5
y = 10
print(x == y)  # Equal to
print(x != y)  # Not equal to
print(x > y)   # Greater than
print(x < y)   # Less than
print(x >= y)  # Greater than or equal to
print(x <= y)  # Less than or equal to
#3. Logical Operators
a = True
b = False
print(a and b)  # Logical AND
print(a or b)   # Logical OR
print(not a)    # Logical NOT
#4. Bitwise Operators
x = 5  # (binary: 0101)
y = 3  # (binary: 0011)
print(x & y)  # Bitwise AND
print(x | y)  # Bitwise OR
print(x ^ y)  # Bitwise XOR
print(~x)     # Bitwise NOT
print(x << 1) # Bitwise Left Shift
print(x >> 1) # Bitwise Right Shift
#5. Assignment Operators
x = 5
x += 3  # Add and assign
print(x)
x *= 2  # Multiply and assign
print(x)
#6. Identity Operators
a = [1, 2, 3]
b = a
c = list(a)
print(a is b)    # Identity is
print(a is c)    # Identity is not
print(a == c)    # Equal
print(a is not c) # Identity is not
#7. Membership Operators
my_list = [1, 2, 3, 4]
print(3 in my_list)     # Membership in
print(5 not in my_list) # Membership not in

#5.Eplain the concept of type casting in Python with examples
#Type casting in Python is the process of converting one data type into another. This is useful for performing operations on different types of data.

#Example: Converting a string to an integer.
x = "10"
y = int(x)
print(y)       # Output: 10
print(type(y)) # Output: <class 'int'>
#This converts the string "10" into the integer 10.

#6.How do conditional statements work in Python? Illustrate with examples
#In Python, there are four main types of conditional statements you can use:

#1.if statement: Executes a block of code if the condition is True.
#2. elif statement: Stands for "else if." It allows you to check multiple conditions after the initial if.
#3.else statement: Executes a block of code if none of the preceding conditions are True
#4. Nested if statements: You can place an if statement inside another if statement, allowing for more complex condition
#example
age = 25
is_student = True

if age < 13:
    print("You are a child.")
elif age < 20:
    print("You are a teenager.")
else:
    if is_student:
        print("You are an adult student.")
    else:
        print("You are an adult.")

#7. Describe the different types of loops in Python and their use cases with examples.
#In Python, there are three primary types of loops: for loops, while loops, and nested loops.

#1. for Loop- Used to iterate over a sequence (like a list, tuple, dictionary, set, or string).
#Example
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

#2. while Loop- Continues to execute as long as a specified condition is True.
#Example:
count = 0
while count < 5:
    print(count)
    count += 1
#3. Nested Loops- Loops inside another loop, useful for working with multi-dimensional data structures.
#Example:
for i in range(1, 4):
    for j in range(1, 4):
        print(i * j, end=' ')
    print()
#4. break and continue- Control statements that modify loop behavior.

#Example with break:
for number in range(10):
    if number == 5:
        break
    print(number)
#Example with continue
for number in range(5):
    if number == 2:
        continue
    print(number)

